library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_unsigned.all;

entity timer is
	port(
		vClkIn, start : in std_logic;
		dataIn : in std_logic_vector(9 downto 0);
		timeOut : out std_logic;
		debugTime : out std_logic_vector(11 downto 0)
	);
end entity timer;

architecture atimer of timer is
    component bcd_counter is
        port (
            Clk, Init, Enable, Direction : in std_logic;
			InitNum, MaxNum, MinNum : in std_logic_vector(3 downto 0);
            Q : out std_logic_vector(3 downto 0)
        );
    end component;

	component Clk_divider is
		port (
			clk_in : in  std_logic;
			Reset  : in  std_logic;
			clk_out: out std_logic
		);
	end component;

	signal direction, init : std_logic;
   signal vEnable1, vEnable2, vEnable3 : std_logic;
   signal vQ1, vQ2, vQ3 : std_logic_vector(3 downto 0);
	signal vInitNum1, vInitNum2, vInitNum3 : std_logic_vector(3 downto 0);
	signal vMaxNum1, vMaxNum2, vMaxNum3 : std_logic_vector(3 downto 0);
	signal vMinNum1, vMinNum2, vMinNum3 : std_logic_vector(3 downto 0);
	signal vClk, Reset : std_logic;
begin
	 dummy : Clk_divider port map(vClkIn, Reset, vClk);
	 minute : bcd_counter port map(vClk, init, vEnable1, direction, vInitNum1, vMaxNum1, vMinNum1, vQ1);
    second_tenths : bcd_counter port map(vClk, init, vEnable2, direction, vInitNum2, vMaxNum2, vMinNum2, vQ2);
    second_oneths : bcd_counter port map(vClk, init, vEnable3, direction, vInitNum3, vMaxNum3, vMinNum3, vQ3);
	
    process (vClk, start)
		variable tEnable1, tEnable2, tEnable3 : std_logic; 
    begin
        if (start = '1') then
	    Reset <= '1';
            init <= '1';
			direction <= '1';
            tEnable1 := '1';
            tEnable2 := '1';
			tEnable3 := '1';
			vInitNum1 <= "00" & dataIn(9 downto 8);
			vInitNum2 <= dataIn(7 downto 4);
			vInitNum3 <= dataIn(3 downto 0);
			vMaxNum1 <= "0011"; -- 3
			vMaxNum2 <= "0101"; -- 5
			vMaxNum3 <= "1001"; -- 9
			vMinNum1 <= "0000";
			vMinNum2 <= "0000";
			vMinNum3 <= "0000";
			timeOut <= '0';
        elsif (rising_edge(vClk)) then
			init <= '0';
			Reset <= '0';
			if (vQ3 = "0000") then
				tEnable2 := '0';
				if (vQ2 = "0000") then
					tEnable2 := '0';
					if (vQ1 = "0000") then
						tEnable1 := '0';
						tEnable2 := '0';
						tEnable3 := '0';
						timeOut <= '1';
					else
						tEnable1 := '0';
					end if;
				else
					tEnable1 := '0';
					tEnable2 := '0';
				end if;
			elsif (vQ3 = "0001") then
				tEnable2 := '1';
				if (vQ2 = "0000") then
					tEnable1 := '1';
				else
					tEnable1 := '0';
				end if;
			else
				tEnable1 := '0';
				tEnable2 := '0';
			end if;
	else
		Reset <= '0';
        end if;
		debugTime <= vQ1 & vQ2 & vQ3;
		vEnable1 <= tEnable1;
		vEnable2 <= tEnable2;
		vEnable3 <= tEnable3;
    end process;
end architecture atimer;